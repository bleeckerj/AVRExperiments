#define F_CPU 8000000
#include "avrlibdefs.h"
#include "avrlibtypes.h"
#include <stdio.h>
#include <util/delay.h>
#include <avr/io.h>
#include <avr/interrupt.h>	// include interrupt support
#include <avr/sleep.h> 

int main(void);
void setup(void);

static u08 mPwrLedLevel = 0;
static void incr_pwr_led(void);

ISR(SIG_INTERRUPT1)
{

}

ISR(SIG_OVERFLOW0) {
  //  incr_pwr_led();
}


static char aDirection;
static void
incr_pwr_led(void)
{
  //TIMSK = 0x03;

  if(mPwrLedLevel == 0x10) {
    aDirection = 1;
  } 
  if(mPwrLedLevel == 0xF0) {
    aDirection = 0;
  }
  if(aDirection == 1) mPwrLedLevel++;
  if(aDirection == 0) mPwrLedLevel--;

  OCR0A = mPwrLedLevel;
}

ISR(SIG_PIN_CHANGE3) {
  /*
  cbi(PCICR, PCIE3);
  OCR0A = 0x00;
  sbi(TIMSK0, TOIE0); // re-enable PWM
  sbi(PCICR, PCIE3);
  if(bit_is_clear(PIND, PIND2)) {
      sbi(TIMSK0, TOIE0); // re-enable PWM
      cbi(PORTB, PB3);
  }
  */
}


ISR(SIG_PIN_CHANGE2) {
  // turn off interrupt sensing on this pin
  cbi(PCICR, PCIE2);
  if(bit_is_clear(PINC, PINC3)) {
    //    if(bit_is_set(TIMSK0, TOIE0)) {
      sleep_enable();
      sei();
      //      TCCR0A |= (0<<COM0A0) | (0<<COM0A1);
      //      cbi(TIMSK0, TOIE0); // disable PWM
      //      _delay_ms(32);
      set_sleep_mode(SLEEP_MODE_PWR_DOWN);
      cbi(PORTB, PB3);
      sleep_mode();
      sleep_disable();
      //TCCR0A |= (1<<WGM00) | (1<<COM0A1); // mode 1, phase-correct PWM
      //sbi(TIMSK0, TOIE0); // re-enable PWM
      sbi(PORTB, PB3);
      //    } else {
      //sbi(TIMSK0, TOIE0); // re-enable PWM
  }
  //  }
  sbi(PCICR, PCIE2);
  sei();

}


int main() {
  setup();
    while(1==1) {
      _delay_ms(32);
      //      for(i=0; i<60; i++) {
      //	_delay_ms(32);
      //      }

      /*
      if(bit_is_clear(PCICR, PCIE2) && bit_is_set(PINC, PINC3)) {
	sbi(PCIFR, PCIF2);
	cbi(PCICR, PCIE2);
      } 
      if(bit_is_clear(PCICR, PCIE2) && bit_is_clear(PINC, PINC3)) {
	//sbi(PCIFR, PCIF2);
	sbi(PCICR, PCIE2);
      }
      */
    }
  return 0;
}

void setup() {
  //  sbi(PORTD, PD3); // turn on pull-up resistor
  EICRA |= (0<<ISC11) | (0<<ISC10);
  // enable INT1
  EIMSK |= (1<<INT1);
  cbi(DDRD, DDD3); // configure PD3 as input


  sei();
}
