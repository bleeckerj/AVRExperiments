/****************************************************************************
Title:    Access serial EEPROM 24C02 using I2C interace
Author:   Peter Fleury <pfleury@gmx.ch> http://jump.to/fleury
File:     $Id: ds32c35_test_c.c,v 1.2 2007/09/01 17:50:50 julian Exp $
Software: AVR-GCC 3.3
Hardware: AT90S8515 at 4 Mhz, any AVR device can be used

Description:
    This example shows how the I2C library i2cmaster.S can be used to 
    access a serial eeprom.
    Based on Atmel Application Note AVR300, adapted to AVR-GCC C interface

*****************************************************************************/
#include <avr/io.h>
#include <util/delay.h>
#include <stdio.h>
#include <stdlib.h>             // contains dtostrf(double..)
#include <avr/io.h>
#include <avr/interrupt.h>	// include interrupt support
#include "i2cmaster.h"
#include "avrlibdefs.h"
#include "avrlibtypes.h"
#include "stdint.h"
#include "uart2.h"
#include "rprintf.h"
#include "vt100.h"
#include "cmdline.h"


#define DS32C35_TWI_ADDR 0x68 // device address

int main(void);
void setup(void);
void getTime(void);

int main(void)
{
  setup();

    for(;;) {
		getTime();
	  int i;
      for(i=0; i<30; i++) {
	_delay_ms(32);
      }
    }
}

void setup(void)
{
    uartInit();
    uartSetBaudRate(0, 9600);
    rprintfInit(uart0SendByte);
    vt100Init();
    vt100ClearScreen();
    vt100SetCursorPos(1,0);
    rprintfProgStrM("\r\nWelcome to the DS32C35 Test Suite!\r\n");
  /* write 0x70,0x71,072,073 to eeprom address 0x00..0x03 (Page Write),
     wait until the device is no longer busy from the previous write operation */
  i2c_start_wait(DS32C35_TWI_ADDR+I2C_WRITE);     // set device address and write mode
  i2c_write(0x00);                        // write start address = 0
  i2c_write(0x00);                        // write data to address 0 seconds
  i2c_write(0x00);                        //    "    "   "    "    1 minutes
  i2c_write(0x15);                        //    "    "   "    "    2 hours
  i2c_write(0x07);                        //    "    "   "    "    3 day
  i2c_write(0x31);                        // date
  i2c_write(0x18);                        // century/month
  i2c_write(0x07);                        // year

  i2c_stop();                             // set stop conditon = release bus


}

void getTime() {
  unsigned char ret;
  i2c_init();                                // init I2C interface

  /* write ok, read value back from eeprom address 0x05, wait until 
     the device is no longer busy from the previous write operation */
  rprintfProgStrM("\r\nstart?\r\n");
  i2c_start_wait(DS32C35_TWI_ADDR+I2C_WRITE);     // set device address and write mode
  i2c_write(0x00);                        // write address = 0
  rprintfProgStrM("\r\nstart again?\r\n");
  i2c_rep_start(DS32C35_TWI_ADDR+I2C_READ);       // set device address and read mode
  ret = i2c_readAck();                    // read one byte
  rprintf("* %x", ret);
  i2c_stop();
        
    
  /* write ok, read value back from eeprom address 0..3 (Sequencial Read),
     wait until the device is no longer busy from the previous write operation */
  i2c_start_wait(DS32C35_TWI_ADDR+I2C_WRITE);      // set device address and write mode
  i2c_write(0x00);                         // write address = 0
  i2c_rep_start(DS32C35_TWI_ADDR+I2C_READ);        // set device address and read mode
  ret = i2c_readAck();                       // read one byte form address 0
  rprintf("%x", ret);
  ret = i2c_readAck();                       //  "    "    "    "     "    1
  rprintf("%x", ret);
  ret = i2c_readAck();                       //  "    "    "    "     "    2
  rprintf("%x", ret);
  ret = i2c_readAck();                       //  "    "    "    "     "    3
  rprintf("%x", ret);
  ret = i2c_readAck();                       //  "    "    "    "     "    3
  rprintf("%x", ret);
  ret = i2c_readAck();                       //  "    "    "    "     "    3
  rprintf("%x", ret);
  ret = i2c_readAck();                       //  "    "    "    "     "    3
  rprintf("%x", ret);
  ret = i2c_readNak();                       //  last byte, send a NACK
  i2c_stop();                              // set stop condition = release bus

}
