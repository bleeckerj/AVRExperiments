
softpwm_tnx5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000380  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000380  00000414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800062  00800062  00000416  2**0
                  ALLOC
  3 .stab         00000d14  00000000  00000000  00000418  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000a90  00000000  00000000  0000112c  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	29 c0       	rjmp	.+82     	; 0x56 <__bad_interrupt>
   4:	28 c0       	rjmp	.+80     	; 0x56 <__bad_interrupt>
   6:	27 c0       	rjmp	.+78     	; 0x56 <__bad_interrupt>
   8:	26 c0       	rjmp	.+76     	; 0x56 <__bad_interrupt>
   a:	cf c0       	rjmp	.+414    	; 0x1aa <__vector_5>
   c:	24 c0       	rjmp	.+72     	; 0x56 <__bad_interrupt>
   e:	23 c0       	rjmp	.+70     	; 0x56 <__bad_interrupt>
  10:	22 c0       	rjmp	.+68     	; 0x56 <__bad_interrupt>
  12:	21 c0       	rjmp	.+66     	; 0x56 <__bad_interrupt>
  14:	20 c0       	rjmp	.+64     	; 0x56 <__bad_interrupt>
  16:	1f c0       	rjmp	.+62     	; 0x56 <__bad_interrupt>
  18:	1e c0       	rjmp	.+60     	; 0x56 <__bad_interrupt>
  1a:	1d c0       	rjmp	.+58     	; 0x56 <__bad_interrupt>
  1c:	1c c0       	rjmp	.+56     	; 0x56 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d1 e0       	ldi	r29, 0x01	; 1
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	e0 e8       	ldi	r30, 0x80	; 128
  32:	f3 e0       	ldi	r31, 0x03	; 3
  34:	03 c0       	rjmp	.+6      	; 0x3c <.do_copy_data_start>

00000036 <.do_copy_data_loop>:
  36:	c8 95       	lpm
  38:	31 96       	adiw	r30, 0x01	; 1
  3a:	0d 92       	st	X+, r0

0000003c <.do_copy_data_start>:
  3c:	a2 36       	cpi	r26, 0x62	; 98
  3e:	b1 07       	cpc	r27, r17
  40:	d1 f7       	brne	.-12     	; 0x36 <.do_copy_data_loop>

00000042 <__do_clear_bss>:
  42:	10 e0       	ldi	r17, 0x00	; 0
  44:	a2 e6       	ldi	r26, 0x62	; 98
  46:	b0 e0       	ldi	r27, 0x00	; 0
  48:	01 c0       	rjmp	.+2      	; 0x4c <.do_clear_bss_start>

0000004a <.do_clear_bss_loop>:
  4a:	1d 92       	st	X+, r1

0000004c <.do_clear_bss_start>:
  4c:	ad 36       	cpi	r26, 0x6D	; 109
  4e:	b1 07       	cpc	r27, r17
  50:	e1 f7       	brne	.-8      	; 0x4a <.do_clear_bss_loop>
  52:	ed d0       	rcall	.+474    	; 0x22e <main>
  54:	94 c1       	rjmp	.+808    	; 0x37e <_exit>

00000056 <__bad_interrupt>:
  56:	d4 cf       	rjmp	.-88     	; 0x0 <__heap_end>

00000058 <h_to_rgb>:
 * Assumes maximum Saturation & maximum Value (brightness)
 * Performs purely integer math, no floating point.
 */
void h_to_rgb(byte h, color* c) 
{
  58:	28 2f       	mov	r18, r24
  5a:	f7 2f       	mov	r31, r23
  5c:	e6 2f       	mov	r30, r22
    byte hd = h / 42;   // 42 == 252/6,  252 == H_MAX
    byte hi = hd % 6;   // gives 0-5
    byte f = h % 42; 
    byte fs = f * 6;
  5e:	6a e2       	ldi	r22, 0x2A	; 42
  60:	59 d1       	rcall	.+690    	; 0x314 <__udivmodqi4>
  62:	89 2f       	mov	r24, r25
  64:	99 27       	eor	r25, r25
  66:	66 e0       	ldi	r22, 0x06	; 6
  68:	70 e0       	ldi	r23, 0x00	; 0
  6a:	42 d1       	rcall	.+644    	; 0x2f0 <__mulhi3>
  6c:	48 2f       	mov	r20, r24
  6e:	59 2f       	mov	r21, r25
    switch( hi ) {
  70:	82 2f       	mov	r24, r18
  72:	6a e2       	ldi	r22, 0x2A	; 42
  74:	4f d1       	rcall	.+670    	; 0x314 <__udivmodqi4>
  76:	66 e0       	ldi	r22, 0x06	; 6
  78:	4d d1       	rcall	.+666    	; 0x314 <__udivmodqi4>
  7a:	92 30       	cpi	r25, 0x02	; 2
  7c:	c9 f0       	breq	.+50     	; 0xb0 <h_to_rgb+0x58>
  7e:	93 30       	cpi	r25, 0x03	; 3
  80:	28 f4       	brcc	.+10     	; 0x8c <h_to_rgb+0x34>
  82:	99 23       	and	r25, r25
  84:	51 f0       	breq	.+20     	; 0x9a <h_to_rgb+0x42>
  86:	91 30       	cpi	r25, 0x01	; 1
  88:	49 f5       	brne	.+82     	; 0xdc <h_to_rgb+0x84>
  8a:	0b c0       	rjmp	.+22     	; 0xa2 <h_to_rgb+0x4a>
  8c:	94 30       	cpi	r25, 0x04	; 4
  8e:	e1 f0       	breq	.+56     	; 0xc8 <h_to_rgb+0x70>
  90:	94 30       	cpi	r25, 0x04	; 4
  92:	98 f0       	brcs	.+38     	; 0xba <h_to_rgb+0x62>
  94:	95 30       	cpi	r25, 0x05	; 5
  96:	11 f5       	brne	.+68     	; 0xdc <h_to_rgb+0x84>
  98:	1c c0       	rjmp	.+56     	; 0xd2 <h_to_rgb+0x7a>
        case 0:
            c->r = 252;     c->g = fs;      c->b = 0;
  9a:	8c ef       	ldi	r24, 0xFC	; 252
  9c:	80 83       	st	Z, r24
  9e:	41 83       	std	Z+1, r20	; 0x01
  a0:	05 c0       	rjmp	.+10     	; 0xac <h_to_rgb+0x54>
           break;
        case 1:
            c->r = 252-fs;  c->g = 252;     c->b = 0;
  a2:	9c ef       	ldi	r25, 0xFC	; 252
  a4:	89 2f       	mov	r24, r25
  a6:	84 1b       	sub	r24, r20
  a8:	80 83       	st	Z, r24
  aa:	91 83       	std	Z+1, r25	; 0x01
  ac:	12 82       	std	Z+2, r1	; 0x02
  ae:	08 95       	ret
            break;
        case 2:
            c->r = 0;       c->g = 252;     c->b = fs;
  b0:	10 82       	st	Z, r1
  b2:	8c ef       	ldi	r24, 0xFC	; 252
  b4:	81 83       	std	Z+1, r24	; 0x01
  b6:	42 83       	std	Z+2, r20	; 0x02
  b8:	08 95       	ret
            break;
        case 3:
            c->r = 0;       c->g = 252-fs;  c->b = 252;
  ba:	10 82       	st	Z, r1
  bc:	9c ef       	ldi	r25, 0xFC	; 252
  be:	89 2f       	mov	r24, r25
  c0:	84 1b       	sub	r24, r20
  c2:	81 83       	std	Z+1, r24	; 0x01
  c4:	92 83       	std	Z+2, r25	; 0x02
  c6:	08 95       	ret
            break;
        case 4:
            c->r = fs;      c->g = 0;       c->b = 252;
  c8:	40 83       	st	Z, r20
  ca:	11 82       	std	Z+1, r1	; 0x01
  cc:	8c ef       	ldi	r24, 0xFC	; 252
  ce:	82 83       	std	Z+2, r24	; 0x02
  d0:	08 95       	ret
            break;
        case 5:
            c->r = 252;     c->g = 0;       c->b = 252-fs;
  d2:	8c ef       	ldi	r24, 0xFC	; 252
  d4:	80 83       	st	Z, r24
  d6:	11 82       	std	Z+1, r1	; 0x01
  d8:	84 1b       	sub	r24, r20
  da:	82 83       	std	Z+2, r24	; 0x02
  dc:	08 95       	ret

000000de <hset>:
            break;
    }
}

/* 
 * Given a hue 0-252, set the LEDs at maximum brightness for that hue
 */
void hset(byte h)
{
  de:	cf 93       	push	r28
  e0:	df 93       	push	r29
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
  e6:	23 97       	sbiw	r28, 0x03	; 3
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	f8 94       	cli
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	0f be       	out	0x3f, r0	; 63
  f0:	cd bf       	out	0x3d, r28	; 61
    color c;
    h_to_rgb(h,&c);
  f2:	6c 2f       	mov	r22, r28
  f4:	7d 2f       	mov	r23, r29
  f6:	6f 5f       	subi	r22, 0xFF	; 255
  f8:	7f 4f       	sbci	r23, 0xFF	; 255
  fa:	ae df       	rcall	.-164    	; 0x58 <h_to_rgb>
    red = c.r;
  fc:	89 81       	ldd	r24, Y+1	; 0x01
  fe:	80 93 66 00 	sts	0x0066, r24
    grn = c.g; 
 102:	8a 81       	ldd	r24, Y+2	; 0x02
 104:	80 93 67 00 	sts	0x0067, r24
    blu = c.b;
 108:	8b 81       	ldd	r24, Y+3	; 0x03
 10a:	80 93 68 00 	sts	0x0068, r24
 10e:	23 96       	adiw	r28, 0x03	; 3
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	f8 94       	cli
 114:	de bf       	out	0x3e, r29	; 62
 116:	0f be       	out	0x3f, r0	; 63
 118:	cd bf       	out	0x3d, r28	; 61
 11a:	df 91       	pop	r29
 11c:	cf 91       	pop	r28
 11e:	08 95       	ret

00000120 <hvset>:
}

/* 
 * Given a hue 0-252 and a brightness 0-255, set LEDs appropriately
 */
void hvset(byte h, byte v) 
{
 120:	0f 93       	push	r16
 122:	1f 93       	push	r17
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
 12c:	23 97       	sbiw	r28, 0x03	; 3
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	f8 94       	cli
 132:	de bf       	out	0x3e, r29	; 62
 134:	0f be       	out	0x3f, r0	; 63
 136:	cd bf       	out	0x3d, r28	; 61
 138:	06 2f       	mov	r16, r22
    color c;
    h_to_rgb(h,&c);
 13a:	6c 2f       	mov	r22, r28
 13c:	7d 2f       	mov	r23, r29
 13e:	6f 5f       	subi	r22, 0xFF	; 255
 140:	7f 4f       	sbci	r23, 0xFF	; 255
 142:	8a df       	rcall	.-236    	; 0x58 <h_to_rgb>
    red = ((c.r * v) / 255);
 144:	11 27       	eor	r17, r17
 146:	89 81       	ldd	r24, Y+1	; 0x01
 148:	99 27       	eor	r25, r25
 14a:	71 2f       	mov	r23, r17
 14c:	60 2f       	mov	r22, r16
 14e:	d0 d0       	rcall	.+416    	; 0x2f0 <__mulhi3>
 150:	6f ef       	ldi	r22, 0xFF	; 255
 152:	70 e0       	ldi	r23, 0x00	; 0
 154:	eb d0       	rcall	.+470    	; 0x32c <__divmodhi4>
 156:	60 93 66 00 	sts	0x0066, r22
    grn = ((c.g * v) / 255);
 15a:	8a 81       	ldd	r24, Y+2	; 0x02
 15c:	99 27       	eor	r25, r25
 15e:	71 2f       	mov	r23, r17
 160:	60 2f       	mov	r22, r16
 162:	c6 d0       	rcall	.+396    	; 0x2f0 <__mulhi3>
 164:	6f ef       	ldi	r22, 0xFF	; 255
 166:	70 e0       	ldi	r23, 0x00	; 0
 168:	e1 d0       	rcall	.+450    	; 0x32c <__divmodhi4>
 16a:	60 93 67 00 	sts	0x0067, r22
    blu = ((c.b * v) / 255);
 16e:	8b 81       	ldd	r24, Y+3	; 0x03
 170:	99 27       	eor	r25, r25
 172:	71 2f       	mov	r23, r17
 174:	60 2f       	mov	r22, r16
 176:	bc d0       	rcall	.+376    	; 0x2f0 <__mulhi3>
 178:	6f ef       	ldi	r22, 0xFF	; 255
 17a:	70 e0       	ldi	r23, 0x00	; 0
 17c:	d7 d0       	rcall	.+430    	; 0x32c <__divmodhi4>
 17e:	60 93 68 00 	sts	0x0068, r22
 182:	23 96       	adiw	r28, 0x03	; 3
 184:	0f b6       	in	r0, 0x3f	; 63
 186:	f8 94       	cli
 188:	de bf       	out	0x3e, r29	; 62
 18a:	0f be       	out	0x3f, r0	; 63
 18c:	cd bf       	out	0x3d, r28	; 61
 18e:	df 91       	pop	r29
 190:	cf 91       	pop	r28
 192:	1f 91       	pop	r17
 194:	0f 91       	pop	r16
 196:	08 95       	ret

00000198 <init>:
}

/*
 *
 */
void init(void)
{
  DDRB = DDRB_MASK;            // set port pins to  output (and input)
 198:	87 e0       	ldi	r24, 0x07	; 7
 19a:	87 bb       	out	0x17, r24	; 23
  
  TIFR  = (1 << TOV0);          // clear interrupt flag
 19c:	82 e0       	ldi	r24, 0x02	; 2
 19e:	88 bf       	out	0x38, r24	; 56
  TIMSK = (1 << TOIE0);         // enable overflow interrupt
 1a0:	89 bf       	out	0x39, r24	; 57
  TCCR0B = (1 << CS00);          // start timer, no prescale
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	83 bf       	out	0x33, r24	; 51
  
  sei();                      // enable interrupts
 1a6:	78 94       	sei
 1a8:	08 95       	ret

000001aa <__vector_5>:
}

/*
 *
 */
int main(void)
{
    init();

    hue = 64;
    bright = 0;
    hvset(hue,bright);
    state = STATE_START;

    for(;;) {

        // little state machine: first detect button push,
        if( bit_is_clear(PINB,PB3) ) {  // PB3 is hue setting
            _delay_ms(DELAY);
            if( bit_is_clear(PINB,PB3) )
                state = STATE_SETTING_HUE;
        }
        else {
            if( state == STATE_SETTING_HUE ) 
                state = STATE_HUE_SET;
        }
        
        if( bit_is_clear(PINB,PB4) ) {  // PB4 is brightness setting
            _delay_ms(DELAY);
            if( bit_is_clear(PINB,PB4) )
                state = STATE_SETTING_BRIGHT;
        }
        else {
            if( state == STATE_SETTING_BRIGHT ) 
                state = STATE_BRIGHT_SET;
        }

        // handle actions within a state
        switch(state) { 
        case STATE_START:
            hue += 5;  // show off
            hset(hue);
            for(int i=0; i<20;i++) 
                _delay_ms(DELAY);
            break;
        case STATE_SETTING_HUE:
            hue++;
            hvset(hue,bright);
            break;
        case STATE_SETTING_BRIGHT:
            bright-=4;
            hvset(hue,bright);
            break;
        }

        _delay_ms(DELAY);
    }
    
}

/*
 *
 */
SIGNAL (SIG_OVERFLOW0)
{
 1aa:	1f 92       	push	r1
 1ac:	0f 92       	push	r0
 1ae:	0f b6       	in	r0, 0x3f	; 63
 1b0:	0f 92       	push	r0
 1b2:	11 24       	eor	r1, r1
 1b4:	8f 93       	push	r24
 1b6:	9f 93       	push	r25
    static byte pinlevelB = PORTB_MASK;
    static byte softcount = 0xFF;
   
    // common anode (+5V) means negative (~) logic
    //PORTB = ~pinlevelB;            // update outputs

    // common cathode (GND) means positive logic
    PORTB = pinlevelB;            // update outputs
 1b8:	80 91 61 00 	lds	r24, 0x0061
 1bc:	88 bb       	out	0x18, r24	; 24

    if(++softcount == 0) {         // increment modulo 256 counter and update
 1be:	90 91 60 00 	lds	r25, 0x0060
 1c2:	9f 5f       	subi	r25, 0xFF	; 255
 1c4:	90 93 60 00 	sts	0x0060, r25
 1c8:	99 23       	and	r25, r25
 1ca:	79 f4       	brne	.+30     	; 0x1ea <__vector_5+0x40>
        // the compare values only when counter = 0.
        compare[0] = compbuff[0];   // verbose code for speed
 1cc:	80 91 66 00 	lds	r24, 0x0066
 1d0:	80 93 69 00 	sts	0x0069, r24
        compare[1] = compbuff[1];
 1d4:	80 91 67 00 	lds	r24, 0x0067
 1d8:	80 93 6a 00 	sts	0x006A, r24
        compare[2] = compbuff[2];
 1dc:	80 91 68 00 	lds	r24, 0x0068
 1e0:	80 93 6b 00 	sts	0x006B, r24
        
	pinlevelB = PORTB_MASK;     // set all port pins high
 1e4:	87 e0       	ldi	r24, 0x07	; 7
 1e6:	80 93 61 00 	sts	0x0061, r24
    }
    // clear port pin on compare match (executed on next interrupt)
    if(compare[0] == softcount) CH0_CLEAR;
 1ea:	80 91 69 00 	lds	r24, 0x0069
 1ee:	89 17       	cp	r24, r25
 1f0:	29 f4       	brne	.+10     	; 0x1fc <__vector_5+0x52>
 1f2:	80 91 61 00 	lds	r24, 0x0061
 1f6:	8e 7f       	andi	r24, 0xFE	; 254
 1f8:	80 93 61 00 	sts	0x0061, r24
    if(compare[1] == softcount) CH1_CLEAR;
 1fc:	80 91 6a 00 	lds	r24, 0x006A
 200:	89 17       	cp	r24, r25
 202:	29 f4       	brne	.+10     	; 0x20e <__vector_5+0x64>
 204:	80 91 61 00 	lds	r24, 0x0061
 208:	8d 7f       	andi	r24, 0xFD	; 253
 20a:	80 93 61 00 	sts	0x0061, r24
    if(compare[2] == softcount) CH2_CLEAR;
 20e:	80 91 6b 00 	lds	r24, 0x006B
 212:	89 17       	cp	r24, r25
 214:	29 f4       	brne	.+10     	; 0x220 <__vector_5+0x76>
 216:	80 91 61 00 	lds	r24, 0x0061
 21a:	8b 7f       	andi	r24, 0xFB	; 251
 21c:	80 93 61 00 	sts	0x0061, r24
 220:	9f 91       	pop	r25
 222:	8f 91       	pop	r24
 224:	0f 90       	pop	r0
 226:	0f be       	out	0x3f, r0	; 63
 228:	0f 90       	pop	r0
 22a:	1f 90       	pop	r1
 22c:	18 95       	reti

0000022e <main>:
 22e:	b4 df       	rcall	.-152    	; 0x198 <init>
 230:	80 e4       	ldi	r24, 0x40	; 64
 232:	80 93 64 00 	sts	0x0064, r24
 236:	10 92 6c 00 	sts	0x006C, r1
 23a:	60 e0       	ldi	r22, 0x00	; 0
 23c:	71 df       	rcall	.-286    	; 0x120 <hvset>
 23e:	10 92 65 00 	sts	0x0065, r1
 242:	b3 99       	sbic	0x16, 3	; 22
 244:	08 c0       	rjmp	.+16     	; 0x256 <main+0x28>
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 246:	80 e8       	ldi	r24, 0x80	; 128
 248:	9e e3       	ldi	r25, 0x3E	; 62
 24a:	01 97       	sbiw	r24, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <main+0x1c>
 24e:	b3 99       	sbic	0x16, 3	; 22
 250:	09 c0       	rjmp	.+18     	; 0x264 <main+0x36>
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	05 c0       	rjmp	.+10     	; 0x260 <main+0x32>
 256:	80 91 65 00 	lds	r24, 0x0065
 25a:	81 30       	cpi	r24, 0x01	; 1
 25c:	19 f4       	brne	.+6      	; 0x264 <main+0x36>
 25e:	82 e0       	ldi	r24, 0x02	; 2
 260:	80 93 65 00 	sts	0x0065, r24
 264:	b4 99       	sbic	0x16, 4	; 22
 266:	0a c0       	rjmp	.+20     	; 0x27c <main+0x4e>
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 268:	80 e8       	ldi	r24, 0x80	; 128
 26a:	9e e3       	ldi	r25, 0x3E	; 62
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <main+0x3e>
 270:	b4 99       	sbic	0x16, 4	; 22
 272:	0c c0       	rjmp	.+24     	; 0x28c <main+0x5e>
 274:	84 e0       	ldi	r24, 0x04	; 4
 276:	80 93 65 00 	sts	0x0065, r24
 27a:	2d c0       	rjmp	.+90     	; 0x2d6 <main+0xa8>
 27c:	80 91 65 00 	lds	r24, 0x0065
 280:	84 30       	cpi	r24, 0x04	; 4
 282:	21 f4       	brne	.+8      	; 0x28c <main+0x5e>
 284:	85 e0       	ldi	r24, 0x05	; 5
 286:	80 93 65 00 	sts	0x0065, r24
 28a:	2d c0       	rjmp	.+90     	; 0x2e6 <main+0xb8>
 28c:	80 91 65 00 	lds	r24, 0x0065
 290:	81 30       	cpi	r24, 0x01	; 1
 292:	c9 f0       	breq	.+50     	; 0x2c6 <main+0x98>
 294:	81 30       	cpi	r24, 0x01	; 1
 296:	18 f0       	brcs	.+6      	; 0x29e <main+0x70>
 298:	84 30       	cpi	r24, 0x04	; 4
 29a:	29 f5       	brne	.+74     	; 0x2e6 <main+0xb8>
 29c:	1c c0       	rjmp	.+56     	; 0x2d6 <main+0xa8>
 29e:	80 91 64 00 	lds	r24, 0x0064
 2a2:	8b 5f       	subi	r24, 0xFB	; 251
 2a4:	80 93 64 00 	sts	0x0064, r24
 2a8:	1a df       	rcall	.-460    	; 0xde <hset>
 2aa:	20 e0       	ldi	r18, 0x00	; 0
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	e0 e8       	ldi	r30, 0x80	; 128
 2b0:	fe e3       	ldi	r31, 0x3E	; 62
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2b2:	8e 2f       	mov	r24, r30
 2b4:	9f 2f       	mov	r25, r31
 2b6:	01 97       	sbiw	r24, 0x01	; 1
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <main+0x88>
 2ba:	2f 5f       	subi	r18, 0xFF	; 255
 2bc:	3f 4f       	sbci	r19, 0xFF	; 255
 2be:	24 31       	cpi	r18, 0x14	; 20
 2c0:	31 05       	cpc	r19, r1
 2c2:	89 f0       	breq	.+34     	; 0x2e6 <main+0xb8>
 2c4:	f6 cf       	rjmp	.-20     	; 0x2b2 <main+0x84>
 2c6:	80 91 64 00 	lds	r24, 0x0064
 2ca:	8f 5f       	subi	r24, 0xFF	; 255
 2cc:	80 93 64 00 	sts	0x0064, r24
 2d0:	60 91 6c 00 	lds	r22, 0x006C
 2d4:	07 c0       	rjmp	.+14     	; 0x2e4 <main+0xb6>
 2d6:	60 91 6c 00 	lds	r22, 0x006C
 2da:	64 50       	subi	r22, 0x04	; 4
 2dc:	60 93 6c 00 	sts	0x006C, r22
 2e0:	80 91 64 00 	lds	r24, 0x0064
 2e4:	1d df       	rcall	.-454    	; 0x120 <hvset>
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2e6:	80 e8       	ldi	r24, 0x80	; 128
 2e8:	9e e3       	ldi	r25, 0x3E	; 62
 2ea:	01 97       	sbiw	r24, 0x01	; 1
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <main+0xbc>
 2ee:	a9 cf       	rjmp	.-174    	; 0x242 <main+0x14>

000002f0 <__mulhi3>:
 2f0:	55 27       	eor	r21, r21
 2f2:	00 24       	eor	r0, r0

000002f4 <__mulhi3_loop>:
 2f4:	80 ff       	sbrs	r24, 0
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <__mulhi3_skip1>
 2f8:	06 0e       	add	r0, r22
 2fa:	57 1f       	adc	r21, r23

000002fc <__mulhi3_skip1>:
 2fc:	66 0f       	add	r22, r22
 2fe:	77 1f       	adc	r23, r23
 300:	61 15       	cp	r22, r1
 302:	71 05       	cpc	r23, r1
 304:	21 f0       	breq	.+8      	; 0x30e <__mulhi3_exit>
 306:	96 95       	lsr	r25
 308:	87 95       	ror	r24
 30a:	00 97       	sbiw	r24, 0x00	; 0
 30c:	99 f7       	brne	.-26     	; 0x2f4 <__mulhi3_loop>

0000030e <__mulhi3_exit>:
 30e:	95 2f       	mov	r25, r21
 310:	80 2d       	mov	r24, r0
 312:	08 95       	ret

00000314 <__udivmodqi4>:
 314:	99 1b       	sub	r25, r25
 316:	79 e0       	ldi	r23, 0x09	; 9
 318:	04 c0       	rjmp	.+8      	; 0x322 <__udivmodqi4_ep>

0000031a <__udivmodqi4_loop>:
 31a:	99 1f       	adc	r25, r25
 31c:	96 17       	cp	r25, r22
 31e:	08 f0       	brcs	.+2      	; 0x322 <__udivmodqi4_ep>
 320:	96 1b       	sub	r25, r22

00000322 <__udivmodqi4_ep>:
 322:	88 1f       	adc	r24, r24
 324:	7a 95       	dec	r23
 326:	c9 f7       	brne	.-14     	; 0x31a <__udivmodqi4_loop>
 328:	80 95       	com	r24
 32a:	08 95       	ret

0000032c <__divmodhi4>:
 32c:	97 fb       	bst	r25, 7
 32e:	09 2e       	mov	r0, r25
 330:	07 26       	eor	r0, r23
 332:	0a d0       	rcall	.+20     	; 0x348 <__divmodhi4_neg1>
 334:	77 fd       	sbrc	r23, 7
 336:	04 d0       	rcall	.+8      	; 0x340 <__divmodhi4_neg2>
 338:	0c d0       	rcall	.+24     	; 0x352 <__udivmodhi4>
 33a:	06 d0       	rcall	.+12     	; 0x348 <__divmodhi4_neg1>
 33c:	00 20       	and	r0, r0
 33e:	1a f4       	brpl	.+6      	; 0x346 <__divmodhi4_exit>

00000340 <__divmodhi4_neg2>:
 340:	70 95       	com	r23
 342:	61 95       	neg	r22
 344:	7f 4f       	sbci	r23, 0xFF	; 255

00000346 <__divmodhi4_exit>:
 346:	08 95       	ret

00000348 <__divmodhi4_neg1>:
 348:	f6 f7       	brtc	.-4      	; 0x346 <__divmodhi4_exit>
 34a:	90 95       	com	r25
 34c:	81 95       	neg	r24
 34e:	9f 4f       	sbci	r25, 0xFF	; 255
 350:	08 95       	ret

00000352 <__udivmodhi4>:
 352:	aa 1b       	sub	r26, r26
 354:	bb 1b       	sub	r27, r27
 356:	51 e1       	ldi	r21, 0x11	; 17
 358:	07 c0       	rjmp	.+14     	; 0x368 <__udivmodhi4_ep>

0000035a <__udivmodhi4_loop>:
 35a:	aa 1f       	adc	r26, r26
 35c:	bb 1f       	adc	r27, r27
 35e:	a6 17       	cp	r26, r22
 360:	b7 07       	cpc	r27, r23
 362:	10 f0       	brcs	.+4      	; 0x368 <__udivmodhi4_ep>
 364:	a6 1b       	sub	r26, r22
 366:	b7 0b       	sbc	r27, r23

00000368 <__udivmodhi4_ep>:
 368:	88 1f       	adc	r24, r24
 36a:	99 1f       	adc	r25, r25
 36c:	5a 95       	dec	r21
 36e:	a9 f7       	brne	.-22     	; 0x35a <__udivmodhi4_loop>
 370:	80 95       	com	r24
 372:	90 95       	com	r25
 374:	68 2f       	mov	r22, r24
 376:	79 2f       	mov	r23, r25
 378:	8a 2f       	mov	r24, r26
 37a:	9b 2f       	mov	r25, r27
 37c:	08 95       	ret

0000037e <_exit>:
 37e:	ff cf       	rjmp	.-2      	; 0x37e <_exit>
